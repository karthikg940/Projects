package com.virtusa.test.web.rest

import static org.hamcrest.collection.IsCollectionWithSize.hasSize
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*
import static org.springframework.test.web.servlet.result.MockMvcResultHandlers.print
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status
//import org.springframework.boot.actuate.health.OrderedHealthAggregator.StatusComparator;
import org.springframework.http.MediaType
import spock.lang.Unroll;
import static org.hamcrest.Matchers.*;

import com.virtusa.test.base.TransactionalWebIntegrationTest
import com.virtusa.test.base.WebAppIntegrationBaseSpecification

@TransactionalWebIntegrationTest
class ShippmentResourceTest extends WebAppIntegrationBaseSpecification {

	@Unroll
	def "get a record from database" (id,orderId,productId,statusCode) {
		given:"based on the id we need to fetch a single record from database"

		when: "I have given an id"
		def createResponse=this.mockMvc.perform(get("/api/shipment/${id}").accept(MediaType.APPLICATION_JSON))
		then: "a record is fetched"
		createResponse.andExpect(status().is(statusCode))
		where:
		id | orderId | productId | statusCode
		1  |  1      |   1       | 200
	}
	
	@Unroll
	def "get the list of records from database" (id,orderId,productId,statusCode) {
		given:"based on the id we need to fetch a single record from database"

		when: "I call getAll method"
		def createResponse=this.mockMvc.perform(get("/api/shipment").accept(MediaType.APPLICATION_JSON))
		then: "list of records are fetched"
		createResponse.andExpect(status().is(statusCode))
		where:
		id | orderId | productId | statusCode
		1  |  1      |   1       | 200
		2  |  2      |   2       | 200
	}
	
	@Unroll
	def "update a record in database" (id,orderId,productId,statusCode) {
		given:"based on the id we need to fetch a single record from database"
		def inputJson =  JsonOutput.toJson([id:3,orderId:3,productId:3,statusCode:200])
		when: "I send an id"
		def createResponse=this.mockMvc.perform(put("/api/shipment/${id}").accept(MediaType.APPLICATION_JSON))
		then: "a record is fetched from the database"
		createResponse.andExpect(status().is(statusCode))
		where:
		id | orderId | productId | statusCode
		1  |  1      |   1       | 200
	    2  |  2      |   2       | 200
	}
	
	def "Create a new shipmentdetail and update data" (id | orderId | productId | statusCode
		1  |  1      |   1       | 200
	    2  |  2      |   2       | 200) {
		given:"I am an authenticated NMT"
		// TODO - Login flow
		def inputJson =  JsonOutput.toJson([id:id, orderId:orderId,productId:productId,statusCode:statusCode])
		def inputJson2 =  JsonOutput.toJson([id:3,orderId:3,productId:3,statusCode:200])
		when: "I enter all the required information for shipment"
				def createResponse = this.mockMvc.perform(post("/api/shipment").content(inputJson).contentType(MediaType.APPLICATION_JSON))
		then: "a shipment record should be created"
		createResponse.andExpect(status().is(statusCode))
		def location=createResponse.andReturn().getResponse().getHeader("location")
     	def response
		def response1
		if(location)
		response = this.mockMvc.perform(put(location).content(inputJson2).contentType(MediaType.APPLICATION_JSON))
//			print "resp........."+response.andReturn().getResponse().getContentAsString()+".....";
			if(response)
				response1 = this.mockMvc.perform(get(location).contentType(MediaType.APPLICATION_JSON))
//				print "resp1........."+response1.andReturn().getResponse().getContentAsString()+".....";
			if(response1)
			response1.andExpect(status().is(200))andExpect(jsonPath('$.orderId').value(""))

		where:
		id | orderId | productId | statusCode
		1  |  1      |   1       | 200
		2  |  2      |   2       | 200
	}
	
	
	
	
	
}
